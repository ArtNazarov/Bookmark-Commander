/*  Bookmark Commander by Tom J Demuyt is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.  Permissions beyond the scope of this license are available by contacting konijn@gmail.com*///"662"//Yes, google provides a search function//But I can debug this onefunction findBookmarkId( stuff , id ){  if( id == "search" )  {    //commander.search();    return prepareSearchResults();  }  var node;  var seek = function( stuff, id )  {    if( stuff && stuff.id && stuff.id == id )      node = stuff;    else      for(var key in stuff)        if( typeof stuff[key] == "object" )          seek( stuff[key] , id );  }  seek( stuff , id );  return node;}function prepareSearchResults(){  if(!commander.results)    commander.results = [];  var results = [];  results.dateAdded = 0;  results.dateGroupModified = 0;  results.id = "search";  results.index = 1;  results.parentId = 0;  results.title = "Search Results";  results.children = commander.results;  return results;}function findBookmarkTitle( id ){  //Deal with search  if( id == "search" )    return "/Search";  //This is not entirely true, sue me  var parent = findBookmarkId( commander.bookmarks , id );  //Start from scratch  var title = "";  //Indicate whether we are dealing with a folder  if( parent.children )    title = title + "/";  //Do some recursive magic  while( parent.parentId )  {    title = "/" + parent.title + title;    parent = findBookmarkId( commander.bookmarks , parent.parentId );  }  //Prefix & postfix to make it look even better  title = " " + title + " ";  //Cut off at the right size  if( title.length > panelwidth )    title = "..." + title.right( panelwidth - 3 );  //Give it back  return title}function sortBookmarks( id , foldersTop , f ){  var folder = findBookmarkId( commander.bookmarks , id );  if( !folder.children )    return;  folder.children.sort( f );  for( var counter = folder.children.length-1 ; counter > -1 ; counter-- )  {    chrome.bookmarks.move( folder.children[counter].id , { parentId: id , index : counter }  );  }  commander.boot();}// Less than 0: Sort "a" to be a lower index than "b"// Zero: "a" and "b" should be considered equal, and no sorting performed.// Greater than 0: Sort "b" to be a lower index than "a".function sortByDateFunction(  a , b ){  try  {    if( a.dateGroupModified && !b.dateGroupModified )      return -1;    if( b.dateGroupModified && !a.dateGroupModified )      return  1;      return a.dateAdded - b.dateAdded;  }  catch (e)  {    console.log( e );    return 0;  }}function sortByDateFunction(  a , b ){  try  {    if( a.dateGroupModified && !b.dateGroupModified ) return -1;    if( b.dateGroupModified && !a.dateGroupModified ) return  1;      return a.dateAdded - b.dateAdded;  }  catch (e)  {    console.log( e );    return 0;  }}function sortByLengthFunction( a , b ){  try  {    if( a.dateGroupModified && !b.dateGroupModified ) return -1;    if( b.dateGroupModified && !a.dateGroupModified ) return  1;      return a.title.length - b.title.length;    return 0;  }  catch (e)  {    console.log( e );    return 0;  }}function sortByNameFunction(  a , b ){  try  {    if( a.dateGroupModified && !b.dateGroupModified ) return -1;    if( b.dateGroupModified && !a.dateGroupModified ) return  1;      if(a.title.toUpperCase()>b.title.toUpperCase())return  1;    if(b.title.toUpperCase()>a.title.toUpperCase())return -1;    return 0;  }  catch (e)  {    console.log( e );    return 0;  }}